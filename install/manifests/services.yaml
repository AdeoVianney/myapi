apiVersion: v1
kind: Template
objects:

###### ImageStreams #####

- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/display-name: Redis
    name: redis
  spec:
    lookupPolicy:
      local: true
    tags:
    - annotations:
        iconClass: icon-redis
        openshift.io/display-name: "Redis"
        tags: redis
        version: "4"
      from:
        kind: DockerImage
        name: "docker.io/redis:4"
      name: "4"
      referencePolicy:
        type: Source

###### Routes #####

- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: "${GIT_BRANCH}"
      component: "api"
      branch: "${GIT_BRANCH}"
    name: "${GIT_BRANCH}"
  spec:
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: edge
    to:
      kind: Service
      name: "api-${GIT_BRANCH}"

###### Services #####

- apiVersion: "v1"
  kind: "Service"
  metadata:
    name: "api-${GIT_BRANCH}"
    labels:
      app: "${GIT_BRANCH}"
      component: "api"
      branch: "${GIT_BRANCH}"
  spec:
    kind: ClusterIP
    ports:
      - name: http
        port: 5000
        targetPort: http
    selector:
      app: "${GIT_BRANCH}"
      component: "api"
      branch: "${GIT_BRANCH}"

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: "${GIT_BRANCH}"
      component: "redis-server"
      branch: "${GIT_BRANCH}"
    name: "redis-server-${GIT_BRANCH}"
  spec:
    ports:
    - name: redis
      port: 6379
      protocol: TCP
      targetPort: 6379
    selector:
      app: "${GIT_BRANCH}"
      component: "redis-server"
      branch: "${GIT_BRANCH}"
    sessionAffinity: None
    type: ClusterIP
    clusterIP: None

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: "${GIT_BRANCH}"
      component: "redis-server"
      branch: "${GIT_BRANCH}"
    name: "redis-sentinel-${GIT_BRANCH}"
  spec:
    ports:
    - name: sentinel
      port: 26379
      protocol: TCP
      targetPort: 26379
    selector:
      app: "${GIT_BRANCH}"
      component: "redis-sentinel"
      branch: "${GIT_BRANCH}"
    sessionAffinity: None
    type: ClusterIP

###### ConfigMaps ######

- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: "${GIT_BRANCH}"
      component: "redis-sentinel"
      branch: "${GIT_BRANCH}"
    name: "redis-sentinel-${GIT_BRANCH}"
  data:
    sentinel.conf: |-
      sentinel monitor mymaster redis-server-${GIT_BRANCH}-0.redis-server-${GIT_BRANCH} 6379 2
      sentinel down-after-milliseconds mymaster 1000
      sentinel failover-timeout mymaster 3000
      sentinel parallel-syncs mymaster 2
      sentinel announce-ip $(hostname -i)
      sentinel announce-port 26379

- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: "${GIT_BRANCH}"
      component: "redis-server"
      branch: "${GIT_BRANCH}"
    name: "redis-server-${GIT_BRANCH}"
  data:
    redis-server-master-init.conf: |-
      tcp-keepalive 60
    redis-server-slave-init.conf: |-
      slaveof redis-server-${GIT_BRANCH}-0.redis-server-${GIT_BRANCH} 6379
      tcp-keepalive 60

##### Deployments #####

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: "redis-sentinel-${GIT_BRANCH}"
    labels:
      app: "${GIT_BRANCH}"
      component: "redis-sentinel"
      branch: "${GIT_BRANCH}"
  spec:
    replicas: 3
    template:
      metadata:
        labels:
          app: "${GIT_BRANCH}"
          component: "redis-sentinel"
          branch: "${GIT_BRANCH}"
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: "${GIT_BRANCH}"
                    component: "redis-sentinel"
                    branch: "${GIT_BRANCH}"
                topologyKey: kubernetes.io/hostname
              weight: 100
        initContainers:
        - name: sentinel-init
          command:
            - "/bin/bash"
            - "-c"
            - |
              eval "echo \"$(cat /redis-init/sentinel.conf)\"" > /redis/sentinel.conf
          image: "redis:4"
          imagePullPolicy: Always
          resources:
            limits:
              cpu: 10m
              memory: 10Mi
            requests:
              cpu: 10m
              memory: 10Mi
          volumeMounts:
          - mountPath: /redis
            name: redis-sentinel-config
          - mountPath: /redis-init
            name: redis-sentinel-init-config
        containers:
        - name: sentinel
          command:
          - "redis-server"
          - "/redis/sentinel.conf"
          - "--sentinel"
          image: "redis:4"
          imagePullPolicy: Always
          livenessProbe:
            exec:
              command:
              - "sh"
              - "-c"
              - "redis-cli -h $(hostname) -p 26379 ping"
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          ports:
          - containerPort: 26379
            name: sentinel
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - "sh"
              - "-c"
              - 'redis-cli -h $(hostname) -p 26379 ping'
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              memory: 100Mi
            requests:
              cpu: 100m
          volumeMounts:
          - mountPath: /redis
            name: redis-sentinel-config
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        terminationGracePeriodSeconds: 30
        volumes:
        - configMap:
            defaultMode: 420
            name: "redis-sentinel-${GIT_BRANCH}"
          name: redis-sentinel-init-config
        - name: redis-sentinel-config
          emptyDir: {}

##### Statefulsets #####

- apiVersion: apps/v1beta1
  kind: StatefulSet
  metadata:
    labels:
      app: "${GIT_BRANCH}"
      component: "redis-server"
      branch: "${GIT_BRANCH}"
    name: "redis-server-${GIT_BRANCH}"
  spec:
    podManagementPolicy: OrderedReady
    replicas: 3
    selector:
      matchLabels:
        app: "${GIT_BRANCH}"
        component: "redis-server"
        branch: "${GIT_BRANCH}"
    serviceName: "redis-server-${GIT_BRANCH}"
    template:
      metadata:
        labels:
          app: "${GIT_BRANCH}"
          component: "redis-server"
          branch: "${GIT_BRANCH}"
      spec:
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: "${GIT_BRANCH}"
                    component: "redis-server"
                    branch: "${GIT_BRANCH}"
                topologyKey: kubernetes.io/hostname
              weight: 100
        initContainers:
        - name: server-init
          image: "redis:4"
          command:
          - "/bin/bash"
          - "-c"
          - |
            if [ "$(redis-cli -h redis-server-${GIT_BRANCH}-0.redis-server-${GIT_BRANCH} ping)" == "PONG" ]; then \
              cp /redis-init/redis-server-slave-init.conf /redis/redis.conf; \
            else \
              cp /redis-init/redis-server-master-init.conf /redis/redis.conf; \
            fi
          volumeMounts:
          - mountPath: /redis/
            name: redis-config
          - mountPath: /redis-init/
            name: redis-init-config
          - mountPath: /data
            name: redis-data
          resources:
            limits:
              cpu: 10m
              memory: 10Mi
            requests:
              cpu: 10m
              memory: 10Mi
        containers:
        - command:
            - "redis-server"
            - "/redis/redis.conf"
            - "--port"
            - "6379"
          image: "redis:4"
          imagePullPolicy: Always
          livenessProbe:
            exec:
              command:
              - "sh"
              - "-c"
              - "redis-cli -h $(hostname) ping"
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: redis
          ports:
          - containerPort: 6379
            name: redis
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - "sh"
              - "-c"
              - "redis-cli -h $(hostname) ping"
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 400m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 100Mi
          volumeMounts:
          - mountPath: /redis/
            name: redis-config
          - mountPath: /data
            name: redis-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        terminationGracePeriodSeconds: 5
        volumes:
        - configMap:
            defaultMode: 420
            name: "redis-server-${GIT_BRANCH}"
          name: redis-init-config
        - emptyDir: {}
          name: redis-data
        - emptyDir: {}
          name: redis-config
    updateStrategy:
      type: RollingUpdate

##### Parameters #####

parameters:
- description: The git branch name
  displayName: The git branch name
  name: GIT_BRANCH
  required: true